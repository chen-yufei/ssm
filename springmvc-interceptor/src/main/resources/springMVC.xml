<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="com.chenyuhui.springmvc"></context:component-scan>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--
        配置默认的servlet处理静态资源
        当前工程的web.xml配置的前端控DispatcherServlet的url - pattern是/
        tomcat的web.xml配置的DefaultServlet的url-pattern也是/
        此时，浏时器发送的请求会优先DispatcherServlet进行处理，但是DispatcherServlet无法处理静态资源
        若配置了<mvc:default-servlet-handler />,此时浏览器发送的所有请求都会越DispatcherServlet处理
        若配置了<mvc:default-servlet-handler />和<mvc:annotation-driven />
        浏览器发送的请求会先被DispatcherServlet.处理，无法处理在交给DefaultServlet处理
    -->
    <!--配置默认的servlet处理静态资源-->
    <mvc:default-servlet-handler />
    <!--
        path：设置处理的请求地址
        view-name：设置请求地址所对应的视图名称
       -->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!--
    注：当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需
        要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签
    -->
    <!--开启mvc的注解驱动-->
    <mvc:annotation-driven />




    <mvc:interceptors>
        <!--
        <bean class="com.chenyuhui.springmvc.interceptor.FirstInterceptor"></bean>
        <ref bean="firstInterceptor"></ref>
        -->
        <!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 -->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/testExclude"/>
            <ref bean="firstInterceptor"></ref>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/testExclude"/>
            <ref bean="secondInterceptor"></ref>
        </mvc:interceptor>
    </mvc:interceptors>



</beans>